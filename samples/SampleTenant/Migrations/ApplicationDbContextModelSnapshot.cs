// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleTenant;

#nullable disable

namespace SampleTenant.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("PermissionNameIndex");

                    b.ToTable("Permissions", "identity");

                    b.HasData(
                        new
                        {
                            Id = "5b9c4926-3dc6-447c-a092-addab890a15f",
                            ConcurrencyStamp = "2cd078e7-9e34-4dc3-9c93-a3c7923b10b8",
                            Name = "Invoice.Read",
                            NormalizedName = "INVOICE.READ"
                        },
                        new
                        {
                            Id = "be5b92e5-c6c6-480b-b235-d4df402a73cc",
                            ConcurrencyStamp = "8242ce34-b236-4730-971c-6f558c3025ae",
                            Name = "Invoice.Write",
                            NormalizedName = "INVOICE.WRITE"
                        },
                        new
                        {
                            Id = "e123b8c0-0646-4075-b73e-07ca9d611c8e",
                            ConcurrencyStamp = "63992d28-f7de-46f1-bf43-c2af0253d491",
                            Name = "Invoice.Delete",
                            NormalizedName = "INVOICE.DELETE"
                        },
                        new
                        {
                            Id = "9dcb49c9-e732-4fb9-80a1-2c5efda61ab2",
                            ConcurrencyStamp = "48b0e926-3200-44f4-9d24-93d108764d01",
                            Name = "Invoice.Send",
                            NormalizedName = "INVOICE.SEND"
                        },
                        new
                        {
                            Id = "ef54d62d-a36b-4ab3-b868-f170c0054fac",
                            ConcurrencyStamp = "0ef9e0f8-daa2-415a-afa0-b4eca8108e6b",
                            Name = "Invoice.Payment",
                            NormalizedName = "INVOICE.PAYMENT"
                        },
                        new
                        {
                            Id = "9c8dd197-bc4e-42b2-8789-f0b4481a05ed",
                            ConcurrencyStamp = "1f42c2c9-2f31-4030-828c-d9a531d5c281",
                            Name = "Invoice.Statistics",
                            NormalizedName = "INVOICE.STATISTICS"
                        },
                        new
                        {
                            Id = "f1af54df-c9e7-4570-850f-c563732c15b4",
                            ConcurrencyStamp = "979ec6dd-cc11-4f20-bf3f-849d575c7733",
                            Name = "Invoice.TaxExport",
                            NormalizedName = "INVOICE.TAXEXPORT"
                        });
                });

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityRolePermission<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermissionId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "identity");

                    b.HasData(
                        new
                        {
                            RoleId = "b0df7eae-a4f9-4d58-8795-ead2aaf6a483",
                            PermissionId = "5b9c4926-3dc6-447c-a092-addab890a15f"
                        },
                        new
                        {
                            RoleId = "2c77ea15-1559-4b9b-bc20-1d64892e4297",
                            PermissionId = "5b9c4926-3dc6-447c-a092-addab890a15f"
                        },
                        new
                        {
                            RoleId = "2c77ea15-1559-4b9b-bc20-1d64892e4297",
                            PermissionId = "e123b8c0-0646-4075-b73e-07ca9d611c8e"
                        },
                        new
                        {
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2",
                            PermissionId = "5b9c4926-3dc6-447c-a092-addab890a15f"
                        },
                        new
                        {
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2",
                            PermissionId = "be5b92e5-c6c6-480b-b235-d4df402a73cc"
                        },
                        new
                        {
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2",
                            PermissionId = "9dcb49c9-e732-4fb9-80a1-2c5efda61ab2"
                        },
                        new
                        {
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2",
                            PermissionId = "ef54d62d-a36b-4ab3-b868-f170c0054fac"
                        },
                        new
                        {
                            RoleId = "49161cff-c451-4c44-ac59-467883fe1517",
                            PermissionId = "9c8dd197-bc4e-42b2-8789-f0b4481a05ed"
                        },
                        new
                        {
                            RoleId = "c7602fdc-a7ef-4c6c-a69f-f8d2dbb5d230",
                            PermissionId = "9c8dd197-bc4e-42b2-8789-f0b4481a05ed"
                        },
                        new
                        {
                            RoleId = "c7602fdc-a7ef-4c6c-a69f-f8d2dbb5d230",
                            PermissionId = "f1af54df-c9e7-4570-850f-c563732c15b4"
                        });
                });

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityTenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DatabaseName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasSeparateDatabase")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHierarchical")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("TenantNameIndex");

                    b.ToTable("Tenants", "identity");

                    b.HasData(
                        new
                        {
                            Id = "7d706acd-f5fd-4979-9e3f-c77a0bd596b2",
                            ConcurrencyStamp = "53745aec-e57a-485b-b775-2c59e852753a",
                            HasSeparateDatabase = false,
                            IsHierarchical = false,
                            Name = "Startup",
                            NormalizedName = "STARTUP"
                        },
                        new
                        {
                            Id = "ee5128d3-4cad-4bcc-aa64-f6abbb30da46",
                            ConcurrencyStamp = "e7955be2-0919-4773-bdd5-6264c0d93ace",
                            HasSeparateDatabase = false,
                            IsHierarchical = false,
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "49a049d2-23ad-41df-8806-240aebaa2f17",
                            ConcurrencyStamp = "53c6c290-d545-4eec-bde0-7886d017566b",
                            HasSeparateDatabase = false,
                            IsHierarchical = false,
                            Name = "Corporate",
                            NormalizedName = "CORPORATE"
                        });
                });

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityTenantRole<string>", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("TenantId", "RoleId");

                    b.ToTable("TenantRoles", "identity");

                    b.HasData(
                        new
                        {
                            TenantId = "7d706acd-f5fd-4979-9e3f-c77a0bd596b2",
                            RoleId = "ecae3c35-0d88-424f-a1bc-31cba5add7a7"
                        },
                        new
                        {
                            TenantId = "ee5128d3-4cad-4bcc-aa64-f6abbb30da46",
                            RoleId = "49161cff-c451-4c44-ac59-467883fe1517"
                        },
                        new
                        {
                            TenantId = "49a049d2-23ad-41df-8806-240aebaa2f17",
                            RoleId = "c7602fdc-a7ef-4c6c-a69f-f8d2dbb5d230"
                        });
                });

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityTenantUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", "identity");

                    b.HasData(
                        new
                        {
                            Id = "ea346013-ec20-4a69-8a60-8684ffb58a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9e69f27-ac5f-419f-a41d-5fbfddd121f4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOSS@STARTUP",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d7146fb-115e-4b4c-9a89-8b222a6bb6b5",
                            TenantId = "7d706acd-f5fd-4979-9e3f-c77a0bd596b2",
                            TwoFactorEnabled = false,
                            UserName = "boss@startup"
                        },
                        new
                        {
                            Id = "50cd8ad5-b945-4541-90c9-156f6940c18b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f0d81bb-05c0-43f3-ae33-e1a8d256bf54",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@STARTUP",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e47cb9aa-d750-4fb6-b6e3-f7b2dc0056af",
                            TenantId = "7d706acd-f5fd-4979-9e3f-c77a0bd596b2",
                            TwoFactorEnabled = false,
                            UserName = "manager@startup"
                        },
                        new
                        {
                            Id = "142838fe-7e64-484b-a769-87b327726715",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "958a3c09-042f-40fe-a904-899da3ade267",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE@STARTUP",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3944f959-e687-411f-bad7-bd2204f3b766",
                            TenantId = "7d706acd-f5fd-4979-9e3f-c77a0bd596b2",
                            TwoFactorEnabled = false,
                            UserName = "employee@startup"
                        },
                        new
                        {
                            Id = "a0f112af-5e39-4b3f-bc50-015591861ec0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c25e98d-0ff0-441f-a3d0-e20ba13bba44",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOSS@COMPANY",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a35b585d-3533-4101-bd50-ece3e00bd912",
                            TenantId = "ee5128d3-4cad-4bcc-aa64-f6abbb30da46",
                            TwoFactorEnabled = false,
                            UserName = "boss@company"
                        },
                        new
                        {
                            Id = "90a4dd66-78d1-4fff-a507-7f88735f7ab6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f336bff-1fd5-4e42-9019-9c12c95c7eec",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@COMPANY",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6f5bc7d-10f7-47f1-952a-d3b0f06900c1",
                            TenantId = "ee5128d3-4cad-4bcc-aa64-f6abbb30da46",
                            TwoFactorEnabled = false,
                            UserName = "manager@company"
                        },
                        new
                        {
                            Id = "04517a45-d6f5-4993-888b-04c924902b3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc2fa762-a704-48ad-b619-497306e920c7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE@COMPANY",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "381b06c5-53a0-4807-8b4c-7499e60613db",
                            TenantId = "ee5128d3-4cad-4bcc-aa64-f6abbb30da46",
                            TwoFactorEnabled = false,
                            UserName = "employee@company"
                        },
                        new
                        {
                            Id = "dbcf2449-14b7-4766-9829-ae65604500b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a775ea6b-edb5-421e-b216-7808fe3f1404",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "BOSS@CORPORATE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eee4bb1d-b215-4ffa-89e3-a7277fc8ef40",
                            TenantId = "49a049d2-23ad-41df-8806-240aebaa2f17",
                            TwoFactorEnabled = false,
                            UserName = "boss@corporate"
                        },
                        new
                        {
                            Id = "aeb83173-9ba7-4aa2-ab82-e434e2dcbe55",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff1b2c50-4a1f-43f8-a3ff-40467bb31ca9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@CORPORATE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fa24477-15cb-4fd4-8cee-c2e3014dd4d2",
                            TenantId = "49a049d2-23ad-41df-8806-240aebaa2f17",
                            TwoFactorEnabled = false,
                            UserName = "manager@corporate"
                        },
                        new
                        {
                            Id = "e420f504-d953-4bec-95fd-1613fd760652",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fde4a2e9-e910-470a-859b-7411a58b86b8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "EMPLOYEE@CORPORATE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5tM19BCnMGTsQz8r8yFNvc4q9iWwkmCYHCsQYQUjlJ3XbZr1fx3tEC1QNNFxiuKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17352187-0ac2-4e9a-9236-61db7fbf2b06",
                            TenantId = "49a049d2-23ad-41df-8806-240aebaa2f17",
                            TwoFactorEnabled = false,
                            UserName = "employee@corporate"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "identity");

                    b.HasData(
                        new
                        {
                            Id = "b0df7eae-a4f9-4d58-8795-ead2aaf6a483",
                            ConcurrencyStamp = "d8afad70-d2b9-4a8b-8f45-c4353012e5b9",
                            Name = "Boss",
                            NormalizedName = "BOSS"
                        },
                        new
                        {
                            Id = "2c77ea15-1559-4b9b-bc20-1d64892e4297",
                            ConcurrencyStamp = "86a176b6-bc3d-4aa7-a235-95c6b154aeb7",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2",
                            ConcurrencyStamp = "304dc512-4ee3-467f-b980-88ea673b9864",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "ecae3c35-0d88-424f-a1bc-31cba5add7a7",
                            ConcurrencyStamp = "bdf26e10-365e-44ed-92bf-f0be01469fa4",
                            Name = "Free",
                            NormalizedName = "FREE"
                        },
                        new
                        {
                            Id = "49161cff-c451-4c44-ac59-467883fe1517",
                            ConcurrencyStamp = "8df733a4-1f9f-4e21-a093-a5958cb67683",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "c7602fdc-a7ef-4c6c-a69f-f8d2dbb5d230",
                            ConcurrencyStamp = "38d36070-b9de-454e-b1bc-bc5eeebf8df6",
                            Name = "Professional",
                            NormalizedName = "PROFESSIONAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "identity");

                    b.HasData(
                        new
                        {
                            UserId = "ea346013-ec20-4a69-8a60-8684ffb58a5f",
                            RoleId = "b0df7eae-a4f9-4d58-8795-ead2aaf6a483"
                        },
                        new
                        {
                            UserId = "a0f112af-5e39-4b3f-bc50-015591861ec0",
                            RoleId = "b0df7eae-a4f9-4d58-8795-ead2aaf6a483"
                        },
                        new
                        {
                            UserId = "dbcf2449-14b7-4766-9829-ae65604500b0",
                            RoleId = "b0df7eae-a4f9-4d58-8795-ead2aaf6a483"
                        },
                        new
                        {
                            UserId = "50cd8ad5-b945-4541-90c9-156f6940c18b",
                            RoleId = "2c77ea15-1559-4b9b-bc20-1d64892e4297"
                        },
                        new
                        {
                            UserId = "90a4dd66-78d1-4fff-a507-7f88735f7ab6",
                            RoleId = "2c77ea15-1559-4b9b-bc20-1d64892e4297"
                        },
                        new
                        {
                            UserId = "aeb83173-9ba7-4aa2-ab82-e434e2dcbe55",
                            RoleId = "2c77ea15-1559-4b9b-bc20-1d64892e4297"
                        },
                        new
                        {
                            UserId = "142838fe-7e64-484b-a769-87b327726715",
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2"
                        },
                        new
                        {
                            UserId = "04517a45-d6f5-4993-888b-04c924902b3a",
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2"
                        },
                        new
                        {
                            UserId = "e420f504-d953-4bec-95fd-1613fd760652",
                            RoleId = "c7ebaa11-c7ed-4357-b287-e0f2dd1eb3f2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "identity");
                });

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityRolePermission<string>", b =>
                {
                    b.HasOne("AspNetCore.Authorization.Permissions.Identity.IdentityPermission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspNetCore.Authorization.Permissions.Identity.IdentityTenantUser", b =>
                {
                    b.HasOne("AspNetCore.Authorization.Permissions.Identity.IdentityTenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AspNetCore.Authorization.Permissions.Identity.IdentityTenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AspNetCore.Authorization.Permissions.Identity.IdentityTenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspNetCore.Authorization.Permissions.Identity.IdentityTenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AspNetCore.Authorization.Permissions.Identity.IdentityTenantUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
